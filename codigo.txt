int estado=0;
int x,y,r1,r2, x_1,y_1,x_2,y_2,x_3,y_3,x_4,y_4,x_5,y_5,x_6,y_6,x_7,y_7,x_8,y_8,x_9,y_9,x_10,y_10,x_11,y_11,x_12,y_12,x_13,y_13,x_14,y_14;
PFont f; 

void setup() {
  size(640, 360);
  noStroke();
  background(255);
  //Para saber los tipos de letra disponibles quite comentarios 
  //a las dos líneas siguientes
  //String[] fontList = PFont.list();
  //printArray(fontList);
  f= createFont("Liberation Mono Bold",16,true);
  
  
}

void draw() { 
  switch(estado){
    case 0:
      background(255);
      textFont(f,16);                  
      fill(0); 
      
      textAlign(CENTER);
      text("Menu",width/2,60); 

      textAlign(LEFT);
      text("1. Circulo",width/2,100); 
      
      textAlign(LEFT);
      text("2. Rectangulo",width/2,140); 
      
      textAlign(LEFT);
      text("3. Estrella",width/2,180); 
      
      textAlign(LEFT);
      text("4. Grafo",width/2,220); 
   
      break;
    case 1:
      background(255);
      fill(100);
      ellipse(252, 144, 72, 72);
      fill(0);
      textFont(f,16); 
      textAlign(CENTER);
      text("5. Regresar a Menu",width/2,340);
      break;
    case 2:
      background(255);
      fill(100);
      rect(81, 81, 63, 63);
      fill(0);
      textFont(f,16); 
      textAlign(CENTER);
      text("5. Regresar a Menu",width/2,340);
      break;
    case 3:
      background(255);
      fill(100);
      star(width/2, height/2, 30, 70, 5); 
      fill(0);
      textFont(f,16); 
      textAlign(CENTER);
      text("5. Regresar a Menu",width/2,340);
      break;
    case 4:
      background(255);
      fill(100);
      x=50;
      y=50;
      r1=10;
      r2=10;
      x_1=150;
      y_1=150;
      x_2=200;
      y_2=50;
      x_3=250;
      y_3=150;
      x_4=270;
      y_4=50;
      x_5=300;
      y_5=150;
      x_6=320;
      y_6=50;
      x_7=350;
      y_7=150;
      x_8=370;
      y_8=50;
      x_9=400;
      y_9=150;
      x_10=420;
      y_10=50;
      x_11=450;
      y_11=150;
      x_12=470;
      y_12=50;
      x_13=500;
      y_13=150;
      x_14=520;
      y_14=50;
      drawArrow(x,y,x_1,y_1); 
      ellipse(x,y,r1*2,r2*2);
      ellipse(x_1,y_1,r1*2,r2*2);
      ellipse(x_2,y_2,r1*2,r2*2);
      ellipse(x_3,y_3,r1*2,r2*2);
      ellipse(x_4,y_4,r1*2,r2*2);
      ellipse(x_5,y_5,r1*2,r2*2);
      ellipse(x_6,y_6,r1*2,r2*2);
      ellipse(x_7,y_7,r1*2,r2*2);
      ellipse(x_8,y_8,r1*2,r2*2);
      ellipse(x_9,y_9,r1*2,r2*2);
      ellipse(x_10,y_10,r1*2,r2*2);
      ellipse(x_11,y_11,r1*2,r2*2);
      ellipse(x_12,y_12,r1*2,r2*2);
      ellipse(x_13,y_13,r1*2,r2*2);
      ellipse(x_14,y_14,r1*2,r2*2);
      fill(50,50,255);
      text("izamal",x+r1*2,y+r2*2);
      text("cuzamá",x_1+r1*2,y_1+r2*2);
      text("hocabó",x_2+r1*2,y_2+r2*2);
      text("hoctún",x_3+r1*2,y_3+r2*2);
      text("homún",x_4+r1*2,y_4+r2*2);
      text("huhí",x_5+r1*2,y_5+r2*2);
      text("kantunil",x_6+r1*2,y_6+r2*2);
      text("snahcat",x_7+r1*2,y_7+r2*2);
      text("sudzal",x_8+r1*2,y_8+r2*2);
      text("tekal de venegas",x_9+r1*2,y_9+r2*2);
      text("tekantó",x_10+r1*2,y_10+r2*2);
      text("tepakán",x_11+r1*2,y_11+r2*2);
      text("teya",x_12+r1*2,y_12+r2*2);
      text("tunkás",x_13+r1*2,y_13+r2*2);
      text("xocchel",x_14+r1*2,y_14+r2*2);
      fill(0);
      textFont(f,16); 
      textAlign(CENTER);
      text("5. Regresar a Menu",width/2,340);
  }
  
}

void keyPressed() {
switch(key) {
  case '1': 
    estado=1;  // Does not execute
    break;
  case '2': 
    estado=2;  // Prints "One"
    break;
  case '3':
    estado=3;
    break;
  case '4':
    estado=4;
    break;
  case '5':
    estado=0;
    break;
    }
  
}

//Para dibujar la estrella
void star(float x, float y, float radius1, float radius2, int npoints) {
  float angle = TWO_PI / npoints;
  float halfAngle = angle/2.0;
  beginShape();
  for (float a = 0; a < TWO_PI; a += angle) {
    float sx = x + cos(a) * radius2;
    float sy = y + sin(a) * radius2;
    vertex(sx, sy);
    sx = x + cos(a+halfAngle) * radius1;
    sy = y + sin(a+halfAngle) * radius1;
    vertex(sx, sy);
  }
  endShape(CLOSE);
}

//Para dibujar la flecha de la arista dirigida
int[] arrowhead = {0,-4,0,4,7,0};
  void drawArrow(int x, int y, int ox, int oy)
  {
    int dx=ox-x;
    int dy=oy-y;
    float angle = getDirection(dx,dy);
    float vl = sqrt(dx*dx+dy*dy) - sqrt(r1*r1+r2*r2)*1.5;
    int[] end = rotateCoordinate(vl, 0, angle);
    line(x,y,x+end[0],y+end[1]);
    drawArrowHead(x+end[0], y+end[1], angle);
  }
  void drawArrowHead(int ox, int oy, float angle) {
    int[] rc1 = rotateCoordinate(arrowhead[0], arrowhead[1], angle);
    int[] rc2 = rotateCoordinate(arrowhead[2], arrowhead[3], angle);
    int[] rc3 = rotateCoordinate(arrowhead[4], arrowhead[5], angle);
    int[] narrow = {ox+ rc1[0], oy+ rc1[1], ox+ rc2[0], oy+ rc2[1], ox+ rc3[0], oy+ rc3[1]};
    stroke(0);
    fill(255);
    triangle(narrow[0], narrow[1], narrow[2], narrow[3], narrow[4], narrow[5]);
  }
  
  // universal helper function: get the angle (in radians) for a particular dx/dy
float getDirection(double dx, double dy) {
  // quadrant offsets
  double d1 = 0.0;
  double d2 = PI/2.0;
  double d3 = PI;
  double d4 = 3.0*PI/2.0;
  // compute angle basd on dx and dy values
  double angle = 0;
  float adx = abs((float)dx);
  float ady = abs((float)dy);
  // Vertical lines are one of two angles
  if(dx==0) { angle = (dy>=0? d2 : d4); }
  // Horizontal lines are also one of two angles
  else if(dy==0) { angle = (dx>=0? d1 : d3); }
  // The rest requires trigonometry (note: two use dx/dy and two use dy/dx!)
  else if(dx>0 && dy>0) { angle = d1 + atan(ady/adx); }    // direction: X+, Y+
  else if(dx<0 && dy>0) { angle = d2 + atan(adx/ady); }    // direction: X-, Y+
  else if(dx<0 && dy<0) { angle = d3 + atan(ady/adx); }    // direction: X-, Y-
  else if(dx>0 && dy<0) { angle = d4 + atan(adx/ady); }    // direction: X+, Y-
  // return directionality in positive radians
  return (float)(angle + 2*PI)%(2*PI); }

// universal helper function: rotate a coordinate over (0,0) by [angle] radians
int[] rotateCoordinate(float x, float y, float angle) {
  int[] rc = {0,0};
  rc[0] = (int)(x*cos(angle) - y*sin(angle));
  rc[1] = (int)(x*sin(angle) + y*cos(angle));
  return rc; }
